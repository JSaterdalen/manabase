// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: decks.sql

package database

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
	"github.com/lib/pq"
)

const createDeck = `-- name: CreateDeck :one
INSERT INTO deck (updated_at, name, commander, owner_id)
VALUES ($1, $2, $3, $4)
RETURNING id, created_at, updated_at, name, commander, owner_id
`

type CreateDeckParams struct {
	UpdatedAt sql.NullTime
	Name      string
	Commander sql.NullString
	OwnerID   uuid.UUID
}

func (q *Queries) CreateDeck(ctx context.Context, arg CreateDeckParams) (Deck, error) {
	row := q.db.QueryRowContext(ctx, createDeck,
		arg.UpdatedAt,
		arg.Name,
		arg.Commander,
		arg.OwnerID,
	)
	var i Deck
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Commander,
		&i.OwnerID,
	)
	return i, err
}

const getDeck = `-- name: GetDeck :one
SELECT id, created_at, updated_at, name, commander, owner_id FROM deck WHERE id = $1
`

func (q *Queries) GetDeck(ctx context.Context, id uuid.UUID) (Deck, error) {
	row := q.db.QueryRowContext(ctx, getDeck, id)
	var i Deck
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Commander,
		&i.OwnerID,
	)
	return i, err
}

const getDeckByName = `-- name: GetDeckByName :one
SELECT id, created_at, updated_at, name, commander, owner_id FROM deck WHERE name = $1
`

func (q *Queries) GetDeckByName(ctx context.Context, name string) (Deck, error) {
	row := q.db.QueryRowContext(ctx, getDeckByName, name)
	var i Deck
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Commander,
		&i.OwnerID,
	)
	return i, err
}

const getDecks = `-- name: GetDecks :many
SELECT id, created_at, updated_at, name, commander, owner_id FROM deck
`

func (q *Queries) GetDecks(ctx context.Context) ([]Deck, error) {
	rows, err := q.db.QueryContext(ctx, getDecks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Deck
	for rows.Next() {
		var i Deck
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Name,
			&i.Commander,
			&i.OwnerID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getDecksByLastPlayed = `-- name: GetDecksByLastPlayed :many
SELECT
	d.id, 
	d.name,
    d.owner_id,
	MAX(g.date_played) AS last_played_date 
FROM deck d
LEFT JOIN player_deck_game pdg
  ON d.id = pdg.deck_id
LEFT JOIN game g
  ON pdg.game_id = g.id
WHERE d.owner_id = ANY($1::uuid[])
GROUP BY d.id
ORDER BY last_played_date DESC NULLS LAST
`

type GetDecksByLastPlayedRow struct {
	ID             uuid.UUID
	Name           string
	OwnerID        uuid.UUID
	LastPlayedDate interface{}
}

func (q *Queries) GetDecksByLastPlayed(ctx context.Context, dollar_1 []uuid.UUID) ([]GetDecksByLastPlayedRow, error) {
	rows, err := q.db.QueryContext(ctx, getDecksByLastPlayed, pq.Array(dollar_1))
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetDecksByLastPlayedRow
	for rows.Next() {
		var i GetDecksByLastPlayedRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.OwnerID,
			&i.LastPlayedDate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getDecksByLastPlayedByPlayer = `-- name: GetDecksByLastPlayedByPlayer :many
SELECT
	d.id, 
	d.name,
    d.owner_id,
	MAX(g.date_played) AS last_played_date 
FROM deck d
LEFT JOIN player_deck_game pdg
  ON d.id = pdg.deck_id
  AND pdg.player_id = $1::uuid
LEFT JOIN game g
  ON pdg.game_id = g.id
WHERE d.owner_id = ANY($2::uuid[])
GROUP BY d.id
ORDER BY last_played_date DESC NULLS LAST
`

type GetDecksByLastPlayedByPlayerParams struct {
	Player    uuid.UUID
	Playerids []uuid.UUID
}

type GetDecksByLastPlayedByPlayerRow struct {
	ID             uuid.UUID
	Name           string
	OwnerID        uuid.UUID
	LastPlayedDate interface{}
}

func (q *Queries) GetDecksByLastPlayedByPlayer(ctx context.Context, arg GetDecksByLastPlayedByPlayerParams) ([]GetDecksByLastPlayedByPlayerRow, error) {
	rows, err := q.db.QueryContext(ctx, getDecksByLastPlayedByPlayer, arg.Player, pq.Array(arg.Playerids))
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetDecksByLastPlayedByPlayerRow
	for rows.Next() {
		var i GetDecksByLastPlayedByPlayerRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.OwnerID,
			&i.LastPlayedDate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getDecksByPlayerId = `-- name: GetDecksByPlayerId :many
SELECT id, created_at, updated_at, name, commander, owner_id FROM deck WHERE owner_id = $1
`

func (q *Queries) GetDecksByPlayerId(ctx context.Context, ownerID uuid.UUID) ([]Deck, error) {
	rows, err := q.db.QueryContext(ctx, getDecksByPlayerId, ownerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Deck
	for rows.Next() {
		var i Deck
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Name,
			&i.Commander,
			&i.OwnerID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPlayerDecks = `-- name: GetPlayerDecks :many
SELECT id, created_at, updated_at, name, commander, owner_id FROM deck WHERE owner_id = ANY($1::uuid[])
`

func (q *Queries) GetPlayerDecks(ctx context.Context, dollar_1 []uuid.UUID) ([]Deck, error) {
	rows, err := q.db.QueryContext(ctx, getPlayerDecks, pq.Array(dollar_1))
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Deck
	for rows.Next() {
		var i Deck
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Name,
			&i.Commander,
			&i.OwnerID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
