// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: playerDeckGames.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const getPlayerDeckGame = `-- name: GetPlayerDeckGame :many
SELECT
    player.id AS player_id,
    player."name" AS player_name,
    deck.id AS deck_id,
    deck."name" AS deck_name,
    pdg.is_won,
    game.id AS game_id,
    game.date_played,
    game.game_number,
    game.is_totem
FROM
    player_deck_game pdg
    JOIN player ON pdg.player_id = player.id
    JOIN game ON pdg.game_id = game.id
    JOIN deck ON pdg.deck_id = deck.id
ORDER BY
    date_played DESC
`

type GetPlayerDeckGameRow struct {
	PlayerID   uuid.UUID
	PlayerName string
	DeckID     uuid.UUID
	DeckName   string
	IsWon      bool
	GameID     uuid.UUID
	DatePlayed time.Time
	GameNumber int32
	IsTotem    bool
}

func (q *Queries) GetPlayerDeckGame(ctx context.Context) ([]GetPlayerDeckGameRow, error) {
	rows, err := q.db.QueryContext(ctx, getPlayerDeckGame)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetPlayerDeckGameRow
	for rows.Next() {
		var i GetPlayerDeckGameRow
		if err := rows.Scan(
			&i.PlayerID,
			&i.PlayerName,
			&i.DeckID,
			&i.DeckName,
			&i.IsWon,
			&i.GameID,
			&i.DatePlayed,
			&i.GameNumber,
			&i.IsTotem,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
