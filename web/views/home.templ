package views

import (
	"fmt"
	"github.com/jsaterdalen/manabase/internal/database"
	"net/http"
	"sort"
)

func NewHomeHandler(db *database.Queries) Handler {
	return Handler{Queries: db}
}

type Handler struct {
	Queries *database.Queries
}

func (h Handler) ServeHTTP(w http.ResponseWriter, r *http.Request) {
	games, err := h.Queries.GetPlayerGameList(r.Context())
	if err != nil {
		//TODO: Log error server side.
	}
	m := NewGameListViewModel(games, err)
	HomePage(m).Render(r.Context(), w)
}

func NewGameListViewModel(games []database.GetPlayerGameListRow, err error) (m GameListViewModel) {
	gameMap := make(map[string]GameWithPlayers)
	for _, game := range games {
		gameId := game.GameID.String()

		if _, ok := gameMap[gameId]; !ok {
			gameMap[gameId] = GameWithPlayers{
				Game: Game{
					GameNumber: int(game.GameNumber),
					DatePlayed: game.DatePlayed.Format("2006-01-02"),
					GameId:     gameId,
				},
				Players: []Player{},
			}
		}

		player := Player{
			Name:  game.PlayerName,
			Deck:  game.DeckName,
			IsWon: game.IsWon,
		}

		game := gameMap[gameId]
		game.Players = append(game.Players, player)
		sort.Slice(game.Players, func(i, j int) bool {
			return game.Players[i].Name < game.Players[j].Name
		})

		if player.IsWon {
			game.Winner = player
		}
		gameMap[gameId] = game
	}
	for _, game := range gameMap {
		m.GameList = append(m.GameList, game)
	}

	// sort m.GameList
	sort.Slice(m.GameList, func(i, j int) bool {
		return m.GameList[i].Game.GameNumber > m.GameList[j].Game.GameNumber
	})

	if err != nil {
		m.ErrorMessage = "Failed to load invites, please try again"
	}
	return m
}

type GameListViewModel struct {
	GameList     []GameWithPlayers
	ErrorMessage string
}

type Game struct {
	GameNumber int
	DatePlayed string
	GameId     string
}

type Player struct {
	Name  string
	Deck  string
	IsWon bool
}

type GameWithPlayers struct {
	Game
	Players []Player
	Winner  Player
}

templ HomePage(m GameListViewModel) {
	@Base() {
		<div class="mx-auto max-w-3xl">
			<ul class="space-y-4 mt-4">
				for _, game := range m.GameList {
					<li class="overflow-hidden rounded-lg bg-white shadow">
						<div class="px-4 py-5 sm:p-6 grid grid-cols-2 gap-4 text-base">
							<div class="text-right">
								<div>Game { fmt.Sprintf("%d", game.GameNumber) }</div>
								<div class="font-bold">{ game.DatePlayed }</div>
							</div>
							<div class="order-first">
								<div class="text-zinc-500">Winner</div>
								<div class="text-xl font-bold">{ game.Winner.Name }</div>
								<div>{ game.Winner.Deck }</div>
							</div>
							<div class="col-span-2 flex gap-x-4">
								<div>
									for _, player := range game.Players {
										if !player.IsWon {
											<div class="text-zinc-500 mb-1">{ player.Name }</div>
										}
									}
								</div>
								<div>
									for _, player := range game.Players {
										if !player.IsWon {
											<div class="mb-1">{ player.Deck }</div>
										}
									}
								</div>
							</div>
						</div>
					</li>
				}
			</ul>
		</div>
	}
}
